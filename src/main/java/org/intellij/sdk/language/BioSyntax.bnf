{
  parserClass="org.intellij.sdk.language.parser.BioSyntaxParser"
  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"
  psiClassPrefix="BioSyntax"
  psiImplClassSuffix="Impl"
  psiPackage="org.intellij.sdk.language.psi"
  psiImplPackage="org.intellij.sdk.language.psi.impl"
  elementTypeHolderClass="org.intellij.sdk.language.psi.BioSyntaxTypes"
  elementTypeClass="org.intellij.sdk.language.psi.BioSyntaxElementType"
  tokenTypeClass="org.intellij.sdk.language.psi.BioSyntaxTokenType"
  psiImplUtilClass="org.intellij.sdk.language.psi.impl.BioSyntaxPsiImplUtil"
}

bioFile ::= item*

item ::= (property | type_declaration | COMMENT | CRLF | assignment)

property ::= (KEY | ID) SEPARATOR (VALUE | sequence)* {
   pin=2
   recoverWhile="recover_property"
   mixin="org.intellij.sdk.language.psi.impl.BioSyntaxNamedElementImpl"
   implements="org.intellij.sdk.language.psi.BioSyntaxNamedElement"
   methods=[getKey getValue getName setName getNameIdentifier getPresentation]
}

type_declaration ::= type_specifier ID SEPARATOR sequence SEMICOLON {
    mixin="org.intellij.sdk.language.psi.impl.BioSyntaxTypeDeclarationBaseImpl" // Use Base implementation
    implements="org.intellij.sdk.language.psi.BioSyntaxTypeDeclarationBase" // Updated to use Base
    methods=[getType getName getValue]
}

assignment ::= ID SEPARATOR dna_sequence COMMENT? {
    mixin="org.intellij.sdk.language.psi.impl.BioSyntaxAssignmentBaseImpl" // Use Base implementation
    implements="org.intellij.sdk.language.psi.BioSyntaxAssignmentBase" // Updated to use Base
}

type_specifier ::= DNA_SEQ

sequence ::= dna_sequence | protein_sequence

dna_sequence ::= valid_dna_sequence | invalid_dna_sequence {
   mixin="org.intellij.sdk.language.psi.impl.BioSyntaxDNASequenceImpl"
   implements="org.intellij.sdk.language.psi.BioSyntaxDNASequence"
}

valid_dna_sequence ::= BASE_PAIR+
invalid_dna_sequence ::= (BASE_PAIR | INVALID_BASE_PAIR)+

protein_sequence ::= AMINO_ACID+

private recover_property ::= !(KEY | SEPARATOR | COMMENT)